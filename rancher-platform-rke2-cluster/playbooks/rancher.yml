---


- name: Install dependencies
  hosts: upstream, downstream
  tags: dependencies
  tasks:
    - name: Refresh package cache
      ansible.builtin.package:
        update_cache: true

    - name: Ensure Python3 pip is installed
      become: true
      ansible.builtin.package:
        name: python3-pip
        state: present

    - name: Install Python Kubernetes modules
      become: true
      ansible.builtin.pip:
        name:
          - kubernetes
          - pyyaml
        state: present

    - name: Install Longhorn dependencies
      become: true
      ansible.builtin.package:
        name:
          - open-iscsi
          - nfs-client
          - nfs-common
        state: present

    - name: Enable iscsid service
      become: true
      ansible.builtin.service:
        name: iscsid
        enabled: true
        state: started

- name: Set up RKE2
  hosts: upstream
  gather_facts: true
  roles:
    - { role: diademiemi.rke2, tags: ['rke2']}
    - { role: diademiemi.helm, tags: ['helm']}

- name: Generate bootstrap password
  hosts: localhost, upstream01
  tags: rancher, always
  tasks:
    - name: Check if secret already exists
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path | default(omit) }}"
        kind: "Secret"
        api_version: "v1"
        namespace: "cattle-system"
        name: bootstrap-secret
      register: bootstrap_secret
      delegate_to: upstream01
      run_once: true
      failed_when: false

    - name: Set boostrap password from secret if it exists
      ansible.builtin.set_fact:
        rancher_bootstrap_password: "{{ bootstrap_secret.resources[0].data.bootstrapPassword | b64decode }}"
      when:
        - bootstrap_secret is not failed
        - bootstrap_secret.resources is defined
        - bootstrap_secret.resources | length > 0
      delegate_to: upstream01
      run_once: true

    - name: Generate bootstrap password
      ansible.builtin.set_fact:
        rancher_bootstrap_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
      when: rancher_bootstrap_password is not defined
      delegate_to: localhost
      run_once: true

- name: Set up and bootstrap Rancher
  hosts: upstream01
  tags: upstream, rancher, bootstrap
  vars:
    rancher_release_type: "stable"
    rancher_version: "2.8.2"
  tasks:
    # https://ranchermanager.docs.rancher.com/getting-started/quick-start-guides/deploy-rancher-manager/helm-cli
    - name: Add cert-manager repository
      become: true
      kubernetes.core.helm_repository:
        name: "jetstack"
        repo_url: "https://charts.jetstack.io"

    - name: Add Rancher Helm repository
      become: true
      kubernetes.core.helm_repository:
        name: "rancher-{{ rancher_release_type }}"
        repo_url: "https://releases.rancher.com/server-charts/{{ rancher_release_type }}"

    - name: Install cert-manager
      become: true
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path | default(omit) }}"
        chart_ref: "jetstack/cert-manager"
        chart_version: "v1.13.0"  # Supported by Rancher
        release_name: "cert-manager"
        namespace: "cert-manager"
        create_namespace: true
        values:
          installCRDs: true

    - name: Install Rancher
      become: true
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path | default(omit) }}"
        chart_ref: "rancher-{{ rancher_release_type }}/rancher"
        chart_version: "{{ rancher_version }}"  # Supported by Rancher
        release_name: "rancher"
        namespace: "cattle-system"
        create_namespace: true
        values: "{{ rancher_values | default({}) }}"

    - name: Wait for rancher to be ready
      become: true
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path | default(omit) }}"
        kind: "Deployment"
        api_version: "apps/v1"
        namespace: "cattle-system"
        label_selectors:
          - "app=rancher"
      register: rancher_deployment
      retries: 60
      delay: 5
      until: |
        rancher_deployment.resources | length > 0 and
        rancher_deployment.resources[0].status is defined and
        rancher_deployment.resources[0].status.replicas is defined and
        rancher_deployment.resources[0].status.readyReplicas is defined and
        rancher_deployment.resources[0].status.readyReplicas == rancher_deployment.resources[0].status.replicas

    - name: "Give Bootstrap password"
      ansible.builtin.debug:
        msg: "Rancher server is running. Access it at `{{ ansible_facts['fqdn'] }}`
          The bootstrap password is `{{ rancher_bootstrap_password }}`"

- name: Deploy Rancher config with Terraform
  hosts: localhost
  tags: rancher, terraform
  vars:
    # ENVIRONMENT
    # Defaults to dev
    # Can be overwritten with vm_utils_terraform_env or env
    _vm_utils_terraform_env: "{{ env | default(_env) }}"
    _env: "{{ vm_utils_terraform_env | default('dev') }}"
    # PROVIDER
    # Defaults to libvirt
    # Can be overwritten with vm_utils_terraform_provider or provider
    _vm_utils_terraform_provider: "{{ provider | default(_provider) }}"
    _provider: "{{ vm_utils_terraform_provider | default('libvirt') }}"
    # PROJECT PATH
    # Defaults to ${PWD}/terraform/infra/provider/, e.g. ./terraform/infra/libvirt/
    # Can be overwritten with vm_utils_terraform_project_path
    # WORKSPACE
    # Defaults to provider-env, e.g. libvirt-dev
    # Can be overwritten with vm_utils_terraform_workspace or workspace
    _vm_utils_terraform_workspace: "{{ workspace | default(_workspace) }}"
    _workspace: "{{ vm_utils_terraform_workspace | default(_vm_utils_terraform_provider~'-'~_vm_utils_terraform_env) }}"
  tasks:
    - name: Try bootstrapping cluster
      block:
        - name: Bootstrap cluster with Terraform
          cloud.terraform.terraform:
            project_path: "{{ lookup('env', 'PWD') }}/terraform/rancher/rancher2"
            state: present
            force_init: true
            # variables_files:
            #   - "{{ lookup('env', 'PWD') }}/terraform/rancher/env/hetzner.tfvars"
            variables:
              rancher_bootstrap_password: "{{ rancher_bootstrap_password }}"
              rancher_users: "{% if rancher_users is defined %}{{ rancher_users | to_json }}\
                {% else %}{{ rancher_users | default(omit) }}{% endif %}"
              rancher_url: "{{ rancher_url }}"
              rancher_clusters: "{% if rancher_clusters is defined %}{{ rancher_clusters | to_json }}\
                {% else %}{{ rancher_clusters | default(omit) }}{% endif %}"
            workspace: "{{ _vm_utils_terraform_workspace }}"
          register: rancher_terraform

      rescue:
        - name: Prompt for confirmation
          ansible.builtin.pause:
            prompt: "It looks like this Terraform state already contains a cluster. Do you want to wipe it and continue? (YES/NO).
              This will destroy all resources in the Terraform state."
          register: _confirmation
          run_once: true
          delegate_to: localhost
          when: _confirmation is not defined

        - name: Fail if confirmation is not 'YES'
          ansible.builtin.fail:
            msg: "Confirmation not 'YES'"
          when:
            - _confirmation.user_input != "YES"

        - name: Wipe Terraform state
          ansible.builtin.shell: |
            set -o pipefail
            terraform state list | cut -f 1 -d '[' | xargs -L 1 terraform state rm
          delegate_to: localhost
          changed_when: true
          environment:
            TF_WORKSPACE: "{{ _vm_utils_terraform_workspace }}"
            TF_IN_AUTOMATION: "true"
          args:
            executable: /bin/bash
            chdir: "{{ lookup('env', 'PWD') }}/terraform/rancher/rancher2"

        - name: Bootstrap cluster with Terraform
          cloud.terraform.terraform:
            project_path: "{{ lookup('env', 'PWD') }}/terraform/rancher/rancher2"
            state: present
            force_init: true
            # variables_files:
            #   - "{{ lookup('env', 'PWD') }}/terraform/rancher/env/hetzner.tfvars"
            variables:
              rancher_bootstrap_password: "{{ rancher_bootstrap_password }}"
              rancher_users: "{% if rancher_users is defined %}{{ rancher_users | to_json }}\
                {% else %}{{ rancher_users | default(omit) }}{% endif %}"
              rancher_url: "{{ rancher_url }}"
              rancher_clusters: "{% if rancher_clusters is defined %}{{ rancher_clusters | to_json }}\
                {% else %}{{ rancher_clusters | default(omit) }}{% endif %}"
            workspace: "{{ _vm_utils_terraform_workspace }}"
          register: rancher_terraform

- name: Set up downstream clusters
  hosts: downstream
  tags: downstream, rancher
  tasks:
    - name: Run node command
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        {{ hostvars['localhost']['rancher_terraform']['outputs']['rancher_cluster_node_commands']['value'][rancher_cluster_name] }} \
        {{ rancher_node_command_args | default('--etcd --controlplane --worker') }}
      args:
        creates: /etc/rancher/rke2
        executable: /bin/bash

- name: Remove local-path as default storage class
  hosts: downstream01
  tags: downstream, rancher, storageclass
  tasks:
    - name: Remove local-path as storage class
      become: true
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path | default('/etc/rancher/rke2/rke2.yaml') }}"
        kind: "StorageClass"
        api_version: "storage.k8s.io/v1"
        name: "local-path"
        state: absent
      register: local_path_storage_class
      until: local_path_storage_class is not failed
      retries: 600
      delay: 10

- name: Deploy Fleet project
  hosts: upstream01
  tags: upstream, rancher, fleet
  tasks:
    - name: Add Fleet project
      become: true
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path | default('/etc/rancher/rke2/rke2.yaml') }}"
        namespace: "{{ item }}"
        definition:
          apiVersion: fleet.cattle.io/v1alpha1
          kind: GitRepo
          metadata:
            name: rancher-config
          spec:
            branch: main
            insecureSkipTLSVerify: false
            paths:
              - /rancher-platform-rke2-cluster/gitops/fleet-global
            repo: https://github.com/diademiemi/test_envs.git
            targets:
              - clusterSelector:
                  matchExpressions:
                    - key: provider.cattle.io
                      operator: NotIn
                      values:
                        - harvester
      loop:
        - fleet-default  # Deploy to downstream clusters
        - fleet-local  # Deploy to upstream cluster

...
